openapi: 3.0.0
info:
  version: '1.0.0'
  title: 'BookStore API'
  description: 'An API for CRUD-ing fro models: Book, Author, Publisher'
  contact:
    name: Ravil
    email: rvl.c137@gmail.com

# servers:
#   - url: "http://localhost:8080/"

paths:
  /books:
    description: Book resource
    # get:
    #   parameters:
    #     - in: query
    #       name: id
    #       required: true
    #       schema:
    #         type: integer
    #   responses:
    #     200:
    #       description: Successfully returned Book
    #       content:
    #         application/json:
    #           schema:
    #             $ref: '#/components/schemas/book'
    post:
      tags:
        - books
      description: Add a new Book
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/bookWithoutID'
      responses:
        201:
          description: Book successfully added
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/book"
    put:
      tags:
        - books
      description: Update an existing book
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/book"
      responses:
        200:
          description: Successfully updated Book
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/book"
              
  /books/{id}:
    description: Get, Delete Book based on ID path parameter
    get:
      tags:
        - books
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Successfully returned Book
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/book'
        400:
          description: Invalid ID supplied
        404:
          description: Book not found
          
    delete:
      tags:
        - books
      description: Delete the book by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Successfully deleted Book
        400:
          description: Invalid ID supplied
        404:
          description: Book not found

  /authors:
    description: Author Resource
    post:
      tags:
        - authors
      description: Create a new Author
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authorWithoutID'
      responses:
        201:
          description: Author successfully added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/author'
    put:
      tags:
        - authors
      description: Update an existing Author
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/author'
      responses:
        200:
         description: Successfully updated Author
         content:
          application/json:
            schema:
              $ref: '#/components/schemas/author'
  /authors/{id}:
    description: Get, Delete Author based on ID path parameter
    get:
      tags:
        - authors
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Successfully returned Author
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/author'
        400:
          description: Invalid ID supplied
        404:
          description: Author not found
    delete:
      tags:
        - authors
      description: Delete an Author by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Successfully deleted Author
        400:
          description: Invalid ID supplied
        404:
          description: Author not found
          

  /publishers:
    description: Publisher Resource
    post:
      tags:
        - publishers
      description: Create a new Publisher
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/publisherWithoutID'
      responses:
        201:
          description: Publisher successfully added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/publisher'
    put:
      tags:
        - publishers
      description: Update an existing Publisher
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/publisher'
      responses:
        200:
         description: Successfully updated Publisher
         content:
          application/json:
            schema:
              $ref: '#/components/schemas/publisher'
  /publishers/{id}:
    description: Get, Delete Publisher based on ID path parameter
    get:
      tags:
        - publishers
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Successfully returned Publisher
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/publisher'
        400:
          description: Invalid ID supplied
        404:
          description: Publisher not found
    delete:
      tags:
        - publishers
      description: Delete an Publisher by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Successfully deleted Publisher
        400:
          description: Invalid ID supplied
        404:
          description: Publisher not found

components:
  schemas:
    book:
      type: object
      properties:
        id:
          type: integer
          example: 0
        price:
          type: number
          format: double
          example: 4000.0
        authorList:
          type: array
          items:
            $ref: '#/components/schemas/author'
          example: #/components/schemas/author
        publisher:
          type: object
          example: #/components/schemas/publisher
        title:
          type: string
          example: Clean Code
        numberOfPages:
          type: integer
          example: 300
        releaseYear:
          type: integer
          example: 1992
    bookWithoutID:
      type: object
      properties:
        price:
          type: number
          format: double
          example: 4000.0
        authorList:
          type: array
          items:
            $ref: '#/components/schemas/author'
          example: #/components/schemas/author
        publisher:
          type: object
          example: #/components/schemas/publisher
        title:
          type: string
          example: Clean Code
        numberOfPages:
          type: integer
          example: 300
        releaseYear:
          type: integer
          example: 1992
    books:
      type: array
      items:
        $ref: '#/components/schemas/book'
    author:
      type: object
      properties:
        id:
          type: integer
          example: 0
        firstName:
          type: string
          example: Leo
        lastName:
          type: string
          example: Tolstoy
        patronymic:
          type: string
          example: Nikolayevich
        birthday:
          type: string
          format: date
          example: 1828-09-09
        booksList:
          type: array
          items:
            $ref: '#/components/schemas/book'
    authorWithoutID:
      type: object
      properties:
        firstName:
          type: string
          example: Leo
        lastName:
          type: string
          example: Tolstoy
        patronymic:
          type: string
          example: Nikolayevich
        birthday:
          type: string
          format: date
          example: 1828-09-09
        booksList:
          type: array
          items:
            $ref: '#/components/schemas/book'
    authors:
      type: array
      items:
        $ref: '#/components/schemas/author'
    publisher:
      type: object
      properties:
        id:
          type: integer
          example: 0
        name:
          type: string
          example: Azbuka
        publishedBooks:
          type: array
          items:
            $ref: '#/components/schemas/book'
    publisherWithoutID:
      type: object
      properties:
        name:
          type: string
          example: Azbuka
        publishedBooks:
          type: array
          items:
            $ref: '#/components/schemas/book'