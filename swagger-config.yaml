openapi: 3.0.0
info:
  version: '1.0.0'
  title: 'BookStore API'
  description: 'An REST API of book store. Allows you to CRUD books, authors, genres, publishers. Also you can create an account and make orders'
  contact:
    name: Ravil
    email: rvl.c137@gmail.com

servers:
  - url: "http://localhost:8080"

paths:
  /books:
    description: Book resource. Get all books, post a book.
    get:
      tags:
        - books
      description: Get information from book store database about all books
      parameters:
        - name: page
          required: false
          in: query
          description: The page which you want to get
          schema:
            type: integer
            example: 0
        - name: size
          required: false
          in: query
          description: The amount of elements in one page
          schema:
            type: integer
            example: 10
      responses:
        200:
          description: Successfully returned an array of books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/book'
    post:
      tags:
        - books
      description: Add a new book to the database
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/saveBook'
      responses:
        200:
          description: Successfully added book to the database
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/book"

  /books/{id}:
    description: Get, delete, update book based on path id parameter
    get:
      description: Get information about specific book by id
      tags:
        - books
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 2
      responses:
        200:
          description: Successfully returned book
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/book'
        400:
          description: Bad request. Invalid id format!
        404:
          description: Book not found. Invalid ID supplied!
    put:
      tags:
        - books
      description: Update an existing book
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 2
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/saveBook"
      responses:
        200:
          description: Successfully updated book
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/book"
        400:
          description: Invalid id format!
        403:
          description: Forbidden! Only users with role 'ADMIN' can change information about books
        404:
          description: Book not found! Invalid id supplied
    delete:
      tags:
        - books
      description: Delete the book by id
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 2
      responses:
        200:
          description: Successfully deleted Book
        400:
          description: Invalid id format
        403:
          description: Forbidden! Only users with role 'ADMIN' can delete information about books
        404:
          description: Book not found. Invalid ID supplied!
  /books/findByTitle:
    get:
      tags:
        - books
      description: Get books by title
      parameters:
        - name: page
          required: false
          in: query
          description: The page which you want to get
          schema:
            type: integer
            example: 0
        - name: size
          required: false
          in: query
          description: The amount of elements in one page
          schema:
            type: integer
            example: 10
        - name: title
          required: true
          in: query
          schema:
            type: string
            example: 'Crime'
      responses:
        200:
          description: Successfully found book by title
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/book'
        400:
          description: Bad request!
  /books/findByGenres:
    get:
      tags:
        - books
      description: Find and get book from database by genres
      parameters:
        - name: page
          required: false
          in: query
          description: The page which you want to get
          schema:
            type: integer
            example: 0
        - name: size
          required: false
          in: query
          description: The amount of elements in one page
          schema:
            type: integer
            example: 10
        - name: values
          in: query
          required: true
          schema:
            type: array
            items:
              type: string
              example: ['mystic', 'thriller']
      responses:
        200:
          description: Successfully retrieved array of books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/book'
        400:
          description: Bad request!
  /authors:
    description: Author resourse. Create, get information about authors from book store database
    get:
      tags:
        - authors
      description: Get all authors from the database
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            example: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            example: 10
      responses:
        200:
          description: Successfully retrieved an array of authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/author'
    post:
      tags:
        - authors
      description: Create a new author
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/saveAuthor'
      responses:
        200:
          description: Successfully created author
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/author'
  /authors/{id}:
    description: Get, delete, update author based on path id parameter
    get:
      tags:
        - authors
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 2
      responses:
        200:
          description: Successfully returned Author
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/author'
        400:
          description: Invalid id format!
        404:
          description: Author not found. Invalid ID supplied!
    put:
      tags:
        - authors
      description: Update an existing Author
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/saveAuthor'
      responses:
        200:
          description: Successfully updated Author
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/author'
        403:
          description: Forbidden! Only users with role 'ADMIN' can change information about author
    delete:
      tags:
        - authors
      description: Delete an Author by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 2
      responses:
        200:
          description: Successfully deleted Author
        400:
          description: Invalid id format!
        403:
          description: Forbidden! Only users with role 'ADMIN' can delete authors
        404:
          description: Author not found. Invalid ID supplied!
  /authors/findByFio:
    get:
      tags:
        - authors
      description: Get authors by firstname, lastname, patronymic
      parameters:
        - name: firstName
          in: query
          required: true
          schema:
            type: string
            example: 'Hov'
        - name: lastName
          in: query
          required: true
          schema:
            type: string
            example: 'Love'
        - name: patronymic
          in: query
          required: true
          schema:
            type: string
            example: 'Phi'
        - name: page
          required: false
          in: query
          description: The page which you want to get
          schema:
            type: integer
            example: 0
        - name: size
          required: false
          in: query
          description: The amount of elements in one page
          schema:
            type: integer
            example: 10
      responses:
        200:
          description: Successfully returned an array of authors by full name
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/author'
  /authors/findByGenres:
    get:
      tags:
        - authors
      description: Get authors by genres
      parameters:
        - name: page
          required: false
          in: query
          description: The page which you want to get
          schema:
            type: integer
            example: 0
        - name: size
          required: false
          in: query
          description: The amount of elements in one page
          schema:
            type: integer
            example: 10
        - name: values
          in: query
          required: true
          schema:
            type: array
            items:
              type: string
              example: ['mystic', 'thriller']
      responses:
        200:
          description: Successfully returned an array of authors by genres
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/author'
  /publishers:
    description: Publisher Resource. Create, get information about publishers from book store database
    get:
      tags:
        - publishers
      description: Get information about all publishers from the database
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            example: 0
        - name: size
          in: query
          schema:
            type: integer
            example: 10
      responses:
        200:
          description: Successfully returned an array of publishers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/publisher'
    post:
      tags:
        - publishers
      description: Create a new publisher
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/savePublisher'
      responses:
        200:
          description: Publisher successfully added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/publisher'
  /publishers/{id}:
    description: Get, delete update publisher based on ID path parameter
    get:
      tags:
        - publishers
      description: Get specific publisher by id
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 2
      responses:
        200:
          description: Successfully returned Publisher
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/publisher'
        400:
          description: Invalid id format!
        404:
          description: Publisher not found! Invalid id supplied
    put:
      tags:
        - publishers
      description: Update an existing publisher
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/savePublisher'
      responses:
        200:
          description: Successfully updated Publisher
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/publisher'
        400:
          description: Invalid id format!
        404:
          description: Publisher not found! Invalid id supplied
    delete:
      tags:
        - publishers
      description: Delete an Publisher by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 2
      responses:
        200:
          description: Successfully deleted Publisher
        400:
          description: Invalid id format!
        404:
          description: Publisher not found. Invalid ID supplied!
  /publishers/findByName:
    get:
      tags:
        - publishers
      description: Get publishers by name
      parameters:
        - name: page
          required: false
          in: query
          description: The page which you want to get
          schema:
            type: integer
            example: 0
        - name: size
          required: false
          in: query
          description: The amount of elements in one page
          schema:
            type: integer
            example: 10
        - name: name
          in: query
          required: true
          schema:
            type: string
            example: 'Azbuka'
      responses:
        200:
          description: Successfully retrieved publishers from database by name
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/publisher'
  /genres:
    description: Genre resource. Get, post genres
    get:
      tags:
        - genres
      description: Get all genres from the database
      parameters:
      - name: page
        required: false
        in: query
        description: The page which you want to get
        schema:
          type: integer
          example: 0
      - name: size
        required: false
        in: query
        description: The amount of elements in one page
        schema:
          type: integer
          example: 10
      responses:
        200:
          description: Successfully returned an array of genres
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/genre'
    post:
      tags:
        - genres
      description: Save a genre to the database
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/genre'
      responses:
        200:
          description: Successfully created a genre
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genre'
  /genres/{id}:
    get:
      tags:
        - genres
      description: Get specific genre by id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 1
      responses:
        200:
          description: Successfully retrieved genre from database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genre'
        400:
          description: Invalid id format!
        403:
          description: Forbidden!
        404:
          description: Genre not found. Invalid id supplied!
    put:
      tags:
        - genres
      description: Update genre
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/genre'
      responses:
        200:
          description: Successfully updated a genre
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/genre'
        400:
          description: Invalid id format!
        403:
          description: Forbidden!
        404:
          description: Genre not found. Invalid id supplied!
    delete:
      tags:
        - genres
      description: Delete genre by id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 2
      responses:
        200:
          description: Successfully deleted a genre
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genre'
        400:
          description: Invalid id format!
        403:
          description: Forbidden!
        404:
          description: Genre not found. Invalid id supplied!
  /users:
    description: User resource. Create, retrieve, delete users from database
    get:
      tags:
        - users
      description: Get information about currently logged in user.
      responses:
        200:
          description: Successfully retrieved user from tha database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        403:
          description: Forbidden. User not authenticated!
    post:
      tags:
        - users
      description: Create a new user in the database
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/saveUser'
      responses:
        200:
          description: Successfully created an user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
    delete:
      tags:
        - users
      description: Delete currently logged in user. User can delete only his/her own account
      responses:
        200:
          description: Successfully deleted user
        400:
          description: Invalid id format!
        404:
          description: User not found. Invalid id supplied!
  /users/{id}:
    get:
      tags:
        - users
      description: Get specific user by id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 2
      responses:
        200:
          description: Successfully retrieved user from the database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        400:
          description: Invalid id format!
        403:
          description: Forbidden. Only users with role ADMIN can get information about other users
        404:
          description: User not found. Invalid id supplied!
    put:
      tags:
        - users
      description: Method for admins to change user role and block flag
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user'
      responses:
        200:
          description: Successfully updated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        400:
          description: Invalid id format!
        403:
          description: Forbidden! Only users with role ADMIN can change user role and block flag of other users
        404:
          description: User not found. Invalid id supplied!
  /users/findAll:
    get:
      tags:
        - users
      description: Get all users from the database
      parameters:
      - name: page
        required: false
        in: query
        description: The page which you want to get
        schema:
          type: integer
          example: 0
      - name: size
        required: false
        in: query
        description: The amount of elements in one page
        schema:
          type: integer
          example: 10
      responses:
        200:
          description: Successfully returned an array of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/user'
        403:
          description: Forbidden! Only users with role 'ADMIN' can get information about other users
  /users/putOwn/updateUsername:
    put:
      tags:
        - users
      description: Allows for users to update their username
      parameters:
        - name: username
          in: query
          required: true
          schema:
            type: string
            example: 'John travolta'
      responses:
        200:
          description: Successfully updated username
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        403:
          description: Forbidden. User not authenticated!
  /users/putOwn/updatePassword:
    put:
      tags:
        - users
      description: Allows for users to update their password
      parameters:
        - name: password
          in: query
          required: true
          schema:
            type: string
            example: 'rty123qwe'
      responses:
        200:
          description: Successfully updated user password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        403:
          description: Forbidden. User not authenticated!
  /auth/login:
    post:
      tags:
        - authentication
      description: Resource for authentication
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authenticationRequestDto'
      responses:
        200:
          description: Successfully logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response'
        403:
          description: Forbidden. User is blocked!
        500:
          description: Invalid username or password!
  /orders:
    get:
      description: Get all orders of currently logged in user
      tags:
        - orders
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            example: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            example: 10
      responses:
        200:
          description: Successfully returned an array of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/order'
        403:
          description: Forbidden. User not authenticated!
    post:
      tags:
        - orders
      description: Create a new order
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/saveOrder'
      responses:
        200:
          description: Successfully created an order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/order'
        403:
          description: Forbidden. User not authenticated!
  /orders/{id}:
    get:
      tags:
        - orders
      description: Get specific order by id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 2
      responses:
        200:
          description: Successfully retrieved order from the database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/order'
        400:
          description: Invalid id format!
        403:
          description: Forbidden. Only users with role ADMIN can get information about other orders
        404:
          description: Order not found. Invalid id supplied!
    put:
      tags:
        - orders
      description: Method for admins to change order
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/saveOrder'
      responses:
        200:
          description: Successfully updated order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/order'
        400:
          description: Invalid id format!
        403:
          description: Forbidden! Only users with role ADMIN can change status of an order
        404:
          description: User not found. Invalid id supplied!
    delete:
      tags:
        - orders
      description: Delete a order with specific id. Order record does not erases from the database, rather order status changes to 'canceled'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 2
      responses:
        200:
          description: Successfully deleted order
        400:
          description: Invalid id format!
        403:
          description: Forbidden! Only users with role ADMIN can delete orders
        404:
          description: Order not found. Invalid id supplied!
  /orders/findAll:
    get:
      description: Get all orders from the database
      tags:
        - orders
      parameters:
      - name: page
        required: false
        in: query
        description: The page which you want to get
        schema:
          type: integer
          example: 0
      - name: size
        required: false
        in: query
        description: The amount of elements in one page
        schema:
          type: integer
          example: 10
      responses:
        200:
          description: Successfully returned an array of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/order'
        403:
          description: Forbidden. Only users with role admin can retrieve information about all orders
  /orders/putOwn/{id}:
    description: Resourse for users to change their own orders
    put:
      tags:
        - orders
      description: Method for users to change their own order
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/saveOrder'
      responses:
        200:
          description: Successfully updated order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/order'
        400:
          description: Invalid id format!
        403:
          description: Forbidden! User not authorized.
        404:
          description: User not found. Invalid id supplied!
  /orders/changeStatus:
    description: Method for admins to change order status
    put:
      tags:
        - orders
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: integer
            example: 2
        - name: newStatus
          in: query
          required: true
          schema:
            type: string
            example: approved
      responses:
        200:
          description: Successfully changed status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/order'
        400:
          description: Invalid id format!
        403:
          description: Forbidden! Only users with role admin can change status of the order
        404:
          description: User not found. Invalid id supplied!
components:
  schemas:
    book:
      type: object
      properties:
        id:
          type: integer
          example: 1
        price:
          type: number
          format: double
          example: 4000.0
        authorList:
          type: array
          items:
            type: string
            example: ['Fyodor Dostoevsky', 'Howard Lovecraft']
        publisher:
          type: string
          example: 'Azbuka'
        title:
          type: string
          example: 'Clean Code'
        numberOfPages:
          type: integer
          example: 300
        releaseYear:
          type: integer
          example: 1992
        genreList:
          type: array
          items:
            type: string
            example: ['fiction', 'children literature ']
        bookQuantity:
          type: integer
          example: 10
    saveBook:
      type: object
      properties:
        id:
          type: integer
          example: 0
        price:
          type: number
          format: double
          example: 4000.0
        authorList:
          type: array
          items:
            type: integer
            example: [1, 2]
        publisherId:
          type: integer
          example: 2
        title:
          type: string
          example: 'Clean Code'
        numberOfPages:
          type: integer
          example: 300
        releaseYear:
          type: integer
          example: 1992
        genreList:
          type: array
          items:
            type: integer
            example: [1, 7]
        bookQuantity:
          type: integer
          example: 10
    author:
      type: object
      properties:
        id:
          type: integer
          example: 1
        firstName:
          type: string
          example: Leo
        lastName:
          type: string
          example: Tolstoy
        patronymic:
          type: string
          example: Nikolayevich
        birthday:
          type: string
          format: date
          example: 1828-09-09
        booksList:
          type: array
          items:
            $ref: '#/components/schemas/book'
        genreList:
          type: array
          items:
            type: string
            example: ['novel', 'historical fiction']
    saveAuthor:
      type: object
      properties:
        id:
          type: integer
          example: 1
        firstName:
          type: string
          example: Leo
        lastName:
          type: string
          example: Tolstoy
        patronymic:
          type: string
          example: Nikolayevich
        birthday:
          type: string
          format: date
          example: 1828-09-09
    publisher:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Azbuka
        publishedBooks:
          type: array
          items:
            $ref: '#/components/schemas/book'
    savePublisher:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Azbuka
    genre:
      type: object
      properties:
        genreId:
          type: integer
          example: 1
        genreName:
          type: string
          example: 'thriller'
    order:
      type: object
      properties:
        orderID:
          type: integer
          example: 1
        userId:
          type: integer
          example: 1
        orderStatus:
          type: string
          example: 'created'
        orderTime:
          type: string
          format: date-time
          example: '2021-01-30T08:30:00Z'
        totalPrice:
          type: number
          example: 9982.5
        orderedBooks:
          type: array
          items:
            $ref: '#/components/schemas/book'
        bookAmount:
          type: array
          items:
            type: integer
            example: [1, 2]
    saveOrder:
      type: object
      properties:
        orderedBooks:
          type: array
          items:
            type: integer
            example: [1, 2]
        bookAmount:
          type: array
          items:
            type: integer
            example: [1, 2]
    user:
      type: object
      properties:
        userId:
          type: integer
          example: 1
        userLogin:
          type: string
          example: 'admin'
        userPassword:
          type: string
          format: password
          example: 'admin'
        userRole:
          type: string
          example: 'ADMIN'
        blockFlag:
          type: boolean
          example: false
    saveUser:
      type: object
      properties:
        userId:
          type: integer
          example: 1
        userLogin:
          type: string
          example: 'regularUser'
        userPassword:
          type: string
          format: password
          example: 'qwerty'
    authenticationRequestDto:
      type: object
      properties:
        username:
          type: string
          example: 'admin'
        password:
          type: string
          format: password
          example: 'admin'
    response:
      type: object
      properties:
        username:
          type: string
          example: 'admin'
        token:
          type: string
          example: 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJyZWd1bGFyIiwicm9sZSI6IlVTRVIiLCJpYXQiOjE2NjAxMzgyOTAsImV4cCI6MTY2MDE0OTA5MH0.ujnJLKBuxvrXxbNsU5f41ZrkPjWIq8_GyUG6GI7hhJ0'